(()=>{"use strict";class e{loginForm(){return'<div class="window nickname_window">\n                    <span class="nickname_window_title">Введите никнейм</span>\n                    <input type="text" class="input nickname_window_input">\n                    <button class="button nickname_window_button">Подтвердить</button>\n                </div>'}loginFormError(){return'<span class="login_error_text">Такой ник уже занят :(</span>'}loginFormEmpty(){return'<span class="login_empty_text">Без никнейма не обойтись!</span>'}chatWindow(){return'<div class="chat">\n                  <div class="window chat_clients">\n                    <span class="chat_clients_title">В сети:</span>\n                    <div class="clients_list"></div>\n                  </div>\n                  <div class="window chat_messages">\n                    <div class="chat_messages_space"></div>\n                    <div class="chat_send_message">\n                      <textarea class="input chat_input" rows="1" cols="33" wrap="hard" placeholder="Введите ваше сообщение"></textarea>\n                      <button class="button chat_button">Отправить</button>\n                    </div>\n                  </div>\n                </div>'}onlineUser(e,s){return`<div class="online_user ${s}">${e}</div>`}message(e,s,t,n){return`<div class="message ${e}">\n                        <div class="message_title">\n                            <span class="message_username">${s}</span>\n                            <span class="message_date">${t}</span>\n                        </div>\n                        <p class="message_text"">${n}</p>\n                    </div>`}}class s{constructor(){this.ws="",this.url="wss://ws-backend-zr1t.onrender.com",this.chat=new n,this.ui=new e}createWS(e){this.ws=new WebSocket(this.url),this.ws.addEventListener("open",(e=>{console.log(e),console.log("ws open")})),this.ws.addEventListener("close",(e=>{console.log(e),console.log("ws close")})),this.ws.addEventListener("message",(s=>{const t=JSON.parse(s.data);"send"===t.type?t.name===e?(t.name="You",this.chat.viewMessages("your_message",t.name,t.date,t.msg)):this.chat.viewMessages("",t.name,t.date,t.msg):"chat"===t.type?(document.querySelector(".chat_messages_space").innerHTML="",t.chat!=[]&&t.chat.forEach((s=>{s.name===e?(s.name="You",this.chat.viewMessages("your_message",s.name,s.date,s.msg)):this.chat.viewMessages("",s.name,s.date,s.msg)}))):(this.chat.usersOnline(t,e),console.log(s)),this.chat.userExit(this.ws,e),this.chat.sendMessage(this.ws,e),console.log("ws message")}))}}class t{constructor(){this.url="https://ws-backend-zr1t.onrender.com/"}async loginToChat(e){const t=fetch(this.url+"new-user",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}),n=await t,a=await n.json();return console.log(a),!!n.ok&&((new s).createWS(a.user.name),a.user.name)}}class n{constructor(){this.api=new t,this.ui=new e,this.container=document.querySelector(".container"),this.messages=[]}init(){this.drawLoginForm(),this.login()}drawLoginForm(){this.container.insertAdjacentHTML("afterbegin",this.ui.loginForm())}drawChat(){this.container.insertAdjacentHTML("afterbegin",this.ui.chatWindow())}usersOnline(e,s){const t=document.querySelector(".clients_list");t.innerHTML="",e.forEach((e=>{s===e.name?(e.name="You",t.insertAdjacentHTML("beforeend",this.ui.onlineUser(e.name,"you"))):t.insertAdjacentHTML("beforeend",this.ui.onlineUser(e.name))}))}userExit(e,s){window.addEventListener("beforeunload",(()=>{e.send(JSON.stringify({type:"exit",user:{name:s}})),e.close()}))}sendMessage(e,s){document.querySelector(".chat_button").addEventListener("click",(()=>{const t=document.querySelector(".chat_input").value;if(!t)return;const n={type:"send",name:s,date:(new Date).toLocaleString(),msg:t};e.send(JSON.stringify(n)),document.querySelector(".chat_input").value=""}))}viewMessages(e,s,t,n){document.querySelector(".chat_messages_space").insertAdjacentHTML("beforeend",this.ui.message(e,s,t,n))}login(){const e=document.querySelector(".nickname_window_input");document.querySelector(".nickname_window_button").addEventListener("click",(()=>{if(document.querySelector(".login_empty_text")&&document.querySelector(".login_empty_text").remove(),document.querySelector(".login_error_text")&&document.querySelector(".login_error_text").remove(),""===e.value)e.classList.add("login_error"),e.insertAdjacentHTML("afterend",this.ui.loginFormEmpty());else{this.api.loginToChat({name:`${e.value}`}).then((s=>{console.log(s),s?(document.querySelector(".nickname_window").classList.add("hidden"),this.drawChat()):(e.classList.add("login_error"),e.insertAdjacentHTML("afterend",this.ui.loginFormError()))}))}}))}}(new n).init()})();